# Creating a DLT Pipeline.
# Silver Layer Pipeline.

##############################################################


import dlt
from pyspark.sql.functions import *
from pyspark.sql.types import *

###############################################################

# Bookings Data

@dlt.table(
    name = "stage_bookings"
)
def stage_bookings():
    
    df = spark.read.format("delta")\
        .load("/Volumes/workspace/bronze/bronzevolume/bookings/data")
    return df 

@dlt.view(
    name = "trans_bookings"
)
def trans_bookings():
    
    df = spark.readStream.table("stage_bookings")
    df = df.withColumn("amount",col("amount").cast(DoubleType()))\
            .withColumn("modifieddate",current_timestamp())\
            .withColumn("booking_date",to_date(col("booking_date"),))\
            .drop("_rescued_data")
    return df

rules ={
    "rule1" : "booking_id IS NOT NULL",
    "rule2" : "passenger_id IS NOT NULL"
    }

@dlt.table(
    name = "Silver_bookings"
)
@dlt.expect_all_or_drop(rules)
def Silver_bookings():
    
    df = spark.readStream.table("trans_bookings")
    return df

################################################################

# Flights Data

@dlt.view(
    name = "trans_flights"
)
def trans_flights():
    df = spark.readStream.format("delta")\
        .load("/Volumes/workspace/bronze/bronzevolume/flights/data/")
    df = df.drop("_rescued_data")\
        .withColumn("modifieddate",current_timestamp())

    return df

dlt.create_streaming_table("silver_flights")

dlt.create_auto_cdc_flow(
    sequence_by= col("flight_id"),
    target = "silver_flights",
    source = "trans_flights",
    keys = ["flight_id"],
    stored_as_scd_type = 1
)

################################################################

# Passengers data
 
@dlt.view(
    name = "trans_passengers"
)
def trans_passengers():
    df = spark.readStream.format("delta")\
        .load("/Volumes/workspace/bronze/bronzevolume/customers/data/")
    df = df.drop("_rescued_data")\
        .withColumn("modifieddate",current_timestamp())

    return(df)

dlt.create_streaming_table("silver_passengers")

dlt.create_auto_cdc_flow(
    sequence_by= col("passenger_id"),
    target = "silver_passengers",
    source = "trans_passengers",
    keys = ["passenger_id"],
    stored_as_scd_type = 1
)

################################################################

# Airports data

@dlt.view(
    name = "trans_airports"
)
def trans_airports():
    df = spark.readStream.format("delta")\
        .load("/Volumes/workspace/bronze/bronzevolume/airports/data/")
    df = df.drop("_rescued_data")\
        .withColumn("modifieddate",current_timestamp())
    return(df)

dlt.create_streaming_table("silver_airports")

dlt.create_auto_cdc_flow(
    sequence_by= col("airport_id"),
    target = "silver_airports",
    source = "trans_airports",
    keys = ["airport_id"],
    stored_as_scd_type = 1
)


####################################################################

#Silver Business: Creating a business Tables as per requirements and you can use select command to select the attributes or the coulumns required.

@dlt.table(
    name = "silver_business"
)
def silver_business():
    df = dlt.readStream("Silver_bookings")\
            .join(dlt.read("silver_flights"),["flight_id"])\
            .join(dlt.read("silver_passengers"),["passenger_id"])\
            .join(dlt.read("silver_airports"),["airport_id"])\
            .drop("modifieddate")

    return df

